name: Playwright Tests

on:
  # Run the workflow on a schedule. Use the following code to run workflow in a specific time
  # schedule:
  #   - cron: '38 6 * * *'
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: "Select the environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - uat

      RUN_LAST_FAILED_TEST:
        description: "Do you want to run only the last failed test?"
        required: false
        default: "No"
        type: choice
        options:
          - "Yes"
          - "No"

      TEST_TYPE:
        description: "Select test types (comma-separated)"
        required: true
        default: "smoke,regression,functional"

      BROWSERS:
        description: "Select browsers (comma-separated)"
        required: true
        default: "edge,chrome,firefox,webkit"

  push:
    branches:
      - main

# Give the workflow permission to deploy the Pages site
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  PW-test:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.51.1-noble # If we update playwright version in project, the PW docker image version need to update accordingly.
      options: --user root
    environment: ${{ github.event.inputs.ENVIRONMENT || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Generate .env file
        run: |
          echo "URL=${{ secrets.URL }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          echo "PASSWORD=\"${{ secrets.PASSWORD }}\"" >> .env

      # Use the following code to cache Node.js modules and Playwright browsers
      # - name: Cache Node.js modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      # - name: Cache Playwright Browsers
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-playwright-browsers-

      - name: Install dependencies
        run: npm ci

      - name: Install Microsoft Edge #PW Docker image doesn't contains Microsoft Edge, so we need to install it
        run: |
          sudo npx playwright install msedge
          sudo npx playwright install-deps

      # As we are using the Playwright Docker image, we don't need to install the browsers, if we use the cache, we can uncomment this step
      # - name: Install Playwright Browsers
      #   run: npx playwright install --with-deps

      - name: Setup the Test Command
        id: test-command
        run: |
          TEST_TAGS=$(echo "${{ github.event.inputs.TEST_TYPE }}" | tr ',' ' ')
          BROWSERS=$(echo "${{ github.event.inputs.BROWSERS }}" | tr ',' ' ')

          CMD="npx playwright test"

          if [ "${{ github.event.inputs.RUN_LAST_FAILED_TEST }}" = "Yes" ]; then
            CMD="$CMD --last-failed"
          fi

          # Add test type filters
          for TAG in $TEST_TAGS; do
            CMD="$CMD --grep $TAG"
          done

          # Add browser filters
          for BROWSER in $BROWSERS; do
            CMD="$CMD --project=$BROWSER"
          done

          echo "COMMAND=$CMD" >> $GITHUB_ENV

      - name: Run Playwright tests
        run: $COMMAND

      - name: Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Configure GitHub Pages
        if: always()
        uses: actions/configure-pages@v5

      - name: Upload Pages Artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report/

  # Deploy Playwright report to GitHub Pages
  deploy:
    if: always()
    needs: PW-test
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy test report to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
